{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PeTeReport PeTeReport ( Pe n Te st Report ) is an open-source application vulnerability reporting tool designed to assist pentesting/redteaming efforts, by simplifying the task of writting and generation of reports. Focused in product security, the tool help security researchers and pentesters to provide detailed findings, appendix, attack paths and manage a finding template database to avoid wasting time spent in the reporting phase. PeTeReport ( Pe n Te st Report ) is written in Django and Python 3 with the aim to help pentesters and security researchers to manage a finding repository, write reports (in Markdown) and generate reports in different formats (HTML, CSV, PDF, Jupyter and Markdown). Pentesting content management and reporting tool Architecture Features Customizable reports output Customizable reports templates Findings template database Possibility to add appendix to findings Possibility to add Attack Flow to findings. This project is created and maintained by the MITRE Engenuity Center for Threat-Informed Defense HTML Output format CSV Output format PDF Output format Jupyter Notebook Output format Markdown Output format CVSS 4 Score Docker installation DefectDojo integration User management Sample Reports PDF Sample HTML Sample MD Sample CSV Sample Jupyter Sample","title":"PeTeReport"},{"location":"#petereport","text":"PeTeReport ( Pe n Te st Report ) is an open-source application vulnerability reporting tool designed to assist pentesting/redteaming efforts, by simplifying the task of writting and generation of reports. Focused in product security, the tool help security researchers and pentesters to provide detailed findings, appendix, attack paths and manage a finding template database to avoid wasting time spent in the reporting phase. PeTeReport ( Pe n Te st Report ) is written in Django and Python 3 with the aim to help pentesters and security researchers to manage a finding repository, write reports (in Markdown) and generate reports in different formats (HTML, CSV, PDF, Jupyter and Markdown).","title":"PeTeReport"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"#features","text":"Customizable reports output Customizable reports templates Findings template database Possibility to add appendix to findings Possibility to add Attack Flow to findings. This project is created and maintained by the MITRE Engenuity Center for Threat-Informed Defense HTML Output format CSV Output format PDF Output format Jupyter Notebook Output format Markdown Output format CVSS 4 Score Docker installation DefectDojo integration User management","title":"Features"},{"location":"#sample-reports","text":"PDF Sample HTML Sample MD Sample CSV Sample Jupyter Sample","title":"Sample Reports"},{"location":"appendix/","text":"Appendix The appendix module facilitate the management of appendix that can be linked to a finding. An appendix is defined by: Finding Appendix Title Appendix Description List of Appendix Add Appendix","title":"Appendix"},{"location":"appendix/#appendix","text":"The appendix module facilitate the management of appendix that can be linked to a finding. An appendix is defined by: Finding Appendix Title Appendix Description","title":"Appendix"},{"location":"appendix/#list-of-appendix","text":"","title":"List of Appendix"},{"location":"appendix/#add-appendix","text":"","title":"Add Appendix"},{"location":"attackflow/","text":"Attack Flows Attack flow is a data model with supporting tooling and examples for describing sequences of adversary behaviors. Attack flows help defenders understand, share, and make threat-informed decisions based on the sequence of actions in a cyber-attack. Flows can be analyzed to identify common patterns in adversary behavior, overlayed on ATT&CK Navigator layers to understand defensive coverage, and create a foundation for intel-driven adversary emulation plans. The Security decision flow module facilitate the management of attack path that can be linked to a finding. The visualization of the attack path of a vulnerability or finding has been implemented adapting a web app that simplifies building attack decision trees: ATT&CK Other attack path/trees planner that I recommend you to take a look: Deciduous Walter: Attack Path Planner List of Attack Flows Add Attack Flow","title":"Attack flow"},{"location":"attackflow/#attack-flows","text":"Attack flow is a data model with supporting tooling and examples for describing sequences of adversary behaviors. Attack flows help defenders understand, share, and make threat-informed decisions based on the sequence of actions in a cyber-attack. Flows can be analyzed to identify common patterns in adversary behavior, overlayed on ATT&CK Navigator layers to understand defensive coverage, and create a foundation for intel-driven adversary emulation plans. The Security decision flow module facilitate the management of attack path that can be linked to a finding. The visualization of the attack path of a vulnerability or finding has been implemented adapting a web app that simplifies building attack decision trees: ATT&CK Other attack path/trees planner that I recommend you to take a look: Deciduous Walter: Attack Path Planner","title":"Attack Flows"},{"location":"attackflow/#list-of-attack-flows","text":"","title":"List of Attack Flows"},{"location":"attackflow/#add-attack-flow","text":"","title":"Add Attack Flow"},{"location":"configuration/","text":"Configuration It can be possible to customize reports and the application configuration in app/config/petereport_config.py Application default credentials PETEREPORT_CONFIG = { 'admin_username': 'admin', 'admin_password': 'P3t3r3p0rt', 'admin_email': 'admin@petereport.pentest', 'viewer_username': 'viewer', 'viewer_password': 'v13w3r', 'viewer_email': 'viewer@petereport.pentest' } Defect Dojo connector credentials DEFECTDOJO_CONFIG = { 'DefectDojoURL': 'https://demo.defectdojo.org', 'apiKey': 'Token Key' # Format: Token <api_key> } Django configuration DJANGO_CONFIG = { 'secret_key': 'django-insecure-key-CHANGEMEPLEASE-pKj9bd9h7*RMCuU', 'debug': False, 'admin_module': False, 'allowed_hosts': '[\\'*\\']', 'server_host': 'http://127.0.0.1:8000', 'upload_memory_size': 10485760 # 10MB } Templates configuration PETEREPORT_TEMPLATES = { 'templates_root': 'preport/templates/tpl', 'storage_reports': 'storage_reports', 'html_template': 'bootstrap-4-pandoc-template/template.html', 'pdf_latex_template': 'petereport.latex', 'report_id_format': 'PEN-DOC-', 'report_csv_name': 'PEN-CSV', 'report_markdown_name': 'PEN-MD', 'report_html_name': 'PEN-HTML', 'report_pdf_name': 'PEN-PDF', 'report_pdf_language': \"en\", 'report_pdf_title_background': \"title.png\", # title.png, blank.png - location: app/preport/templates/tpl/pdf/ 'report_pdf_pages_background': \"title.png\", # title.png, blank.png - location: app/preport/templates/tpl/pdf/ 'report_jupyter_name': 'PEN-JUPYTER', 'initial_text': 'TBC', 'titlepage-color': \"e6e2e2\", 'titlepage-text-color': \"000000\", 'titlepage-rule-color': \"cc0000\", 'titlepage-rule-height': 2 } Markdown configuration Report information and media host configuration: BASE64 : Stores images in Database MEDIA : Stores the images in the server (it is recommended to restrict the access to the server and encrypt the data to mitigate the leak or disclosure of the evidences). The path is not protected. This is highly insecure and not encouraged for production use. Should be configured the web server (apache, nginx, etc) to serve the media content using a protected link. PETEREPORT_MARKDOWN = { 'author': 'Pentest company', 'subject': 'Pentest Report', 'website': 'https://github.com/1modm/petereport', 'martor_upload_method': 'BASE64' # BASE64 (stored in DB) or MEDIA (path not protected) 'media_host': 'http://127.0.0.1:8000' }","title":"Configuration"},{"location":"configuration/#configuration","text":"It can be possible to customize reports and the application configuration in app/config/petereport_config.py","title":"Configuration"},{"location":"configuration/#application-default-credentials","text":"PETEREPORT_CONFIG = { 'admin_username': 'admin', 'admin_password': 'P3t3r3p0rt', 'admin_email': 'admin@petereport.pentest', 'viewer_username': 'viewer', 'viewer_password': 'v13w3r', 'viewer_email': 'viewer@petereport.pentest' }","title":"Application default credentials"},{"location":"configuration/#defect-dojo-connector-credentials","text":"DEFECTDOJO_CONFIG = { 'DefectDojoURL': 'https://demo.defectdojo.org', 'apiKey': 'Token Key' # Format: Token <api_key> }","title":"Defect Dojo connector credentials"},{"location":"configuration/#django-configuration","text":"DJANGO_CONFIG = { 'secret_key': 'django-insecure-key-CHANGEMEPLEASE-pKj9bd9h7*RMCuU', 'debug': False, 'admin_module': False, 'allowed_hosts': '[\\'*\\']', 'server_host': 'http://127.0.0.1:8000', 'upload_memory_size': 10485760 # 10MB }","title":"Django configuration"},{"location":"configuration/#templates-configuration","text":"PETEREPORT_TEMPLATES = { 'templates_root': 'preport/templates/tpl', 'storage_reports': 'storage_reports', 'html_template': 'bootstrap-4-pandoc-template/template.html', 'pdf_latex_template': 'petereport.latex', 'report_id_format': 'PEN-DOC-', 'report_csv_name': 'PEN-CSV', 'report_markdown_name': 'PEN-MD', 'report_html_name': 'PEN-HTML', 'report_pdf_name': 'PEN-PDF', 'report_pdf_language': \"en\", 'report_pdf_title_background': \"title.png\", # title.png, blank.png - location: app/preport/templates/tpl/pdf/ 'report_pdf_pages_background': \"title.png\", # title.png, blank.png - location: app/preport/templates/tpl/pdf/ 'report_jupyter_name': 'PEN-JUPYTER', 'initial_text': 'TBC', 'titlepage-color': \"e6e2e2\", 'titlepage-text-color': \"000000\", 'titlepage-rule-color': \"cc0000\", 'titlepage-rule-height': 2 }","title":"Templates configuration"},{"location":"configuration/#markdown-configuration","text":"Report information and media host configuration: BASE64 : Stores images in Database MEDIA : Stores the images in the server (it is recommended to restrict the access to the server and encrypt the data to mitigate the leak or disclosure of the evidences). The path is not protected. This is highly insecure and not encouraged for production use. Should be configured the web server (apache, nginx, etc) to serve the media content using a protected link. PETEREPORT_MARKDOWN = { 'author': 'Pentest company', 'subject': 'Pentest Report', 'website': 'https://github.com/1modm/petereport', 'martor_upload_method': 'BASE64' # BASE64 (stored in DB) or MEDIA (path not protected) 'media_host': 'http://127.0.0.1:8000' }","title":"Markdown configuration"},{"location":"default_creds/","text":"Administrator: admin/P3t3r3p0rt Viewer: viewer/v13w3r","title":"Default Credentials"},{"location":"docker/","text":"Docker Environment Follow oficial installation guidelines: Docker Engine overview . Example in Ubuntu: sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Deployment Clone repository cd /opt git clone https://github.com/1modm/petereport cd petereport Customize reports and configuration in app/config/petereport_config.py Build environment docker compose build --build-arg TARGETARCH=amd64 docker compose up Go to https://127.0.0.1/ Login with any of users created admin/P3t3r3p0rt (administrator) and viewer/v13w3r (viewer) or the user credentials configured in the configuration file Try harder Create a report","title":"Docker"},{"location":"docker/#docker","text":"","title":"Docker"},{"location":"docker/#environment","text":"Follow oficial installation guidelines: Docker Engine overview . Example in Ubuntu: sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin","title":"Environment"},{"location":"docker/#deployment","text":"Clone repository cd /opt git clone https://github.com/1modm/petereport cd petereport Customize reports and configuration in app/config/petereport_config.py Build environment docker compose build --build-arg TARGETARCH=amd64 docker compose up Go to https://127.0.0.1/ Login with any of users created admin/P3t3r3p0rt (administrator) and viewer/v13w3r (viewer) or the user credentials configured in the configuration file Try harder Create a report","title":"Deployment"},{"location":"findings/","text":"Findings The finding module facilitate the management of findings in the reports. A finding is defined by: Title Status Severity CVSS Score CWE Description Location Impact Recommendation References Appendix Attack path List of findings Create new findings Add Finding from Templates Can be added findings to a report from the template list previously created. Add custom fields Can be added custom fields to the findings: Import Findings from DefectDojo We can import the findings from DefectDojo , first of all we need to edit the configuration file in order to add the API endpoint and the API key of our DefectDojo deployment. Edit configuration in app/config/petereport_config.py DEFECTDOJO_CONFIG = { 'DefectDojoURL': 'https://demo.defectdojo.org', 'apiKey': 'Token Key' # Format Token Key } Import Findings from CSV Can be imported from a CSV findings following the next format: // Comma-separated values (CSV) file format \"ID\",\"Status\",\"Title\",\"Severity\",\"CVSS Base Score\",\"CVSS Score\",\"CWE\",\"Description\",\"Location\",\"Impact\",\"Recommendation\",\"References\",\"Appendix\",\"Appendix Description\" \"2834q345-b24e-4ghf-r86d-ftue38af5480\",\"Open\",\"Finding 1\",\"Low\",\"3.7 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)\",\"3.7\",\"73\",\"Description\",\"127.0.0.1\",\"Impact\",\"Recommendation\",\"References\",\"Appendix\",\"Appendix Description\" CWE List When a finding is created must be selected a CWE in order to create a category of findings, for reference has been populated the next CWE list from Mitre: Software Development Hardware Design Research Concepts","title":"Findings"},{"location":"findings/#findings","text":"The finding module facilitate the management of findings in the reports. A finding is defined by: Title Status Severity CVSS Score CWE Description Location Impact Recommendation References Appendix Attack path","title":"Findings"},{"location":"findings/#list-of-findings","text":"","title":"List of findings"},{"location":"findings/#create-new-findings","text":"","title":"Create new findings"},{"location":"findings/#add-finding-from-templates","text":"Can be added findings to a report from the template list previously created.","title":"Add Finding from Templates"},{"location":"findings/#add-custom-fields","text":"Can be added custom fields to the findings:","title":"Add custom fields"},{"location":"findings/#import-findings-from-defectdojo","text":"We can import the findings from DefectDojo , first of all we need to edit the configuration file in order to add the API endpoint and the API key of our DefectDojo deployment. Edit configuration in app/config/petereport_config.py DEFECTDOJO_CONFIG = { 'DefectDojoURL': 'https://demo.defectdojo.org', 'apiKey': 'Token Key' # Format Token Key }","title":"Import Findings from DefectDojo"},{"location":"findings/#import-findings-from-csv","text":"Can be imported from a CSV findings following the next format: // Comma-separated values (CSV) file format \"ID\",\"Status\",\"Title\",\"Severity\",\"CVSS Base Score\",\"CVSS Score\",\"CWE\",\"Description\",\"Location\",\"Impact\",\"Recommendation\",\"References\",\"Appendix\",\"Appendix Description\" \"2834q345-b24e-4ghf-r86d-ftue38af5480\",\"Open\",\"Finding 1\",\"Low\",\"3.7 (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N)\",\"3.7\",\"73\",\"Description\",\"127.0.0.1\",\"Impact\",\"Recommendation\",\"References\",\"Appendix\",\"Appendix Description\"","title":"Import Findings from CSV"},{"location":"findings/#cwe-list","text":"When a finding is created must be selected a CWE in order to create a category of findings, for reference has been populated the next CWE list from Mitre: Software Development Hardware Design Research Concepts","title":"CWE List"},{"location":"products/","text":"Products The products module facilitate the management of products. A product have the next fields by: Product Name Product Description List of products Create new products","title":"Products"},{"location":"products/#products","text":"The products module facilitate the management of products. A product have the next fields by: Product Name Product Description","title":"Products"},{"location":"products/#list-of-products","text":"","title":"List of products"},{"location":"products/#create-new-products","text":"","title":"Create new products"},{"location":"reports/","text":"Reports The report module facilitate the management of products. A report is defined by: Product Report ID Report Title Executive summary Scope Out of scope Methodology Recommendation Report date List of Reports Create new reports Report Details Template Customization It can be edited the templates used for each export format, just go to the folder /app/preport/templates/tpl and modify the markdown, latex or html as needed.","title":"Reports"},{"location":"reports/#reports","text":"The report module facilitate the management of products. A report is defined by: Product Report ID Report Title Executive summary Scope Out of scope Methodology Recommendation Report date","title":"Reports"},{"location":"reports/#list-of-reports","text":"","title":"List of Reports"},{"location":"reports/#create-new-reports","text":"","title":"Create new reports"},{"location":"reports/#report-details","text":"","title":"Report Details"},{"location":"reports/#template-customization","text":"It can be edited the templates used for each export format, just go to the folder /app/preport/templates/tpl and modify the markdown, latex or html as needed.","title":"Template Customization"},{"location":"users/","text":"User management The user module facilitate the management of users and roles in the application. There are 2 builtins roles: administrator and viewer. Administrator role has full permissions access Viewer role Projects: view Reports: view, generate output Findings: view Finding templates: view List of users and roles Create new users","title":"User management"},{"location":"users/#user-management","text":"The user module facilitate the management of users and roles in the application. There are 2 builtins roles: administrator and viewer. Administrator role has full permissions access Viewer role Projects: view Reports: view, generate output Findings: view Finding templates: view","title":"User management"},{"location":"users/#list-of-users-and-roles","text":"","title":"List of users and roles"},{"location":"users/#create-new-users","text":"","title":"Create new users"}]}